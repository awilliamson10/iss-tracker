{"version":3,"sources":["Overlay.js","App.js","index.js"],"names":["Socials","class","href","Sun","planetRef","useRef","gltf","useLoader","GLTFLoader","useFrame","current","rotation","y","fallback","ref","object","scene","scale","Planet","ISS_TLE","satrec","twoline2satrec","split","trim","date","Date","positionAndVelocity","propagate","position","x","z","useTexture","colorMap","args","map","App","camera","fov","intensity","planet","xRadius","yRadius","zRadius","OrbitControls","Stars","radius","depth","count","factor","saturation","fade","Loader","ReactDOM","render","document","getElementById"],"mappings":"yPAGe,SAASA,IACtB,OACE,8BACE,mBAAGC,MAAM,eAAeC,KAAK,mCAA7B,sBCEN,SAASC,IACP,IAAMC,EAAYC,mBACZC,EAAOC,YAAUC,IAAY,kBAInC,OAHAC,aAAS,WACPL,EAAUM,QAAQC,SAASC,GAAK,QAGhC,mCACE,cAAC,WAAD,CAAUC,SAAW,aAArB,SACE,2BAAWC,IAAKV,EAAWW,OAAQT,EAAKU,MAAOC,MAAO,CAAC,KAAM,KAAM,YAM3E,SAASC,IACP,IAAMd,EAAYC,mBAClBI,aAAS,WACP,IAAMU,EAAO,mJAEPC,EAASC,YACbF,EAAQG,MAAM,MAAM,GAAGC,OACvBJ,EAAQG,MAAM,MAAM,GAAGC,QACnBC,EAAO,IAAIC,KACXC,EAAsBC,YAAUP,EAAQI,GAC9CpB,EAAUM,QAAQkB,SAASC,EAAmC,KAA/BH,EAAoBE,SAASC,EAC5DzB,EAAUM,QAAQkB,SAAShB,EAAmC,KAA/Bc,EAAoBE,SAAShB,EAC5DR,EAAUM,QAAQkB,SAASE,EAAmC,KAA/BJ,EAAoBE,SAASE,EAC5D1B,EAAUM,QAAQC,SAASC,GAAK,QAblB,MAeGmB,YAAW,CAAC,+BAAxBC,EAfS,oBAgBhB,OACE,uBAAMlB,IAAKV,EAAX,UACE,gCAAgB6B,KAAM,CAAC,EAAG,GAAI,MAC9B,sCACEC,IAAKF,OAiDEG,MA3Cf,WACE,IAAMhB,EAAO,kKAGPC,EAASC,YACbF,EAAQG,MAAM,MAAM,GAAGC,OACvBJ,EAAQG,MAAM,MAAM,GAAGC,QAEnBC,EAAO,IAAIC,KACXC,EAAsBC,YAAUP,EAAQI,GAE9C,OACE,qCACE,eAAC,IAAD,CAAQY,OAAQ,CAAER,SAAU,CAAiC,MAA/BF,EAAoBE,SAASC,EAAyC,MAA/BH,EAAoBE,SAAShB,EAAyC,MAA/Bc,EAAoBE,SAASE,GAAUO,IAAK,IAAxJ,UACE,cAAC,WAAD,CAAUxB,SAAS,aAAnB,SACE,cAACV,EAAD,MAEF,8BAAcmC,UAAW,KACzB,kCAAkBV,SAAU,CAAC,GAAI,GAAI,GAAIU,UAAW,IACpD,cAAC,WAAD,CAAUzB,SAAS,aAAnB,SACE,cAACK,EAAD,CAAQqB,OAAS,CACfC,QAAwC,KAA/Bd,EAAoBE,SAASC,EACtCY,QAAwC,KAA/Bf,EAAoBE,SAAShB,EACtC8B,QAAwC,KAA/BhB,EAAoBE,SAASE,OAI1C,cAACa,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACAC,OAAQ,IACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAI,OAGN,cAACC,EAAA,EAAD,IACA,cAACnD,EAAD,QClFNoD,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.bf6501d9.chunk.js","sourcesContent":["import React from \"react\"\nimport \"styled-components/macro\"\n\nexport default function Socials() {\n  return (\n    <div>\n      <a class=\"article-link\" href=\"https://github.com/awilliamson10\">Github</a>\n    </div>\n  )\n}\n","import React, { Suspense, useRef } from \"react\";\nimport { Canvas, useFrame, useLoader } from \"@react-three/fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Loader, OrbitControls, useTexture, Stars } from \"@react-three/drei\";\nimport \"./index.css\";\nimport { propagate, twoline2satrec } from \"satellite.js\";\nimport Socials from \"./Overlay\"\n\nfunction Sun() {\n  const planetRef = useRef();\n  const gltf = useLoader(GLTFLoader, 'models/ISS.glb');\n  useFrame(() => {\n    planetRef.current.rotation.y -= 0.0002;\n  });\n  return (\n    <>\n      <Suspense fallback = \"loading...\">\n        <primitive ref={planetRef} object={gltf.scene} scale={[0.009,0.009,0.009]} />\n      </Suspense>\n    </>\n  );\n}\n\nfunction Planet() {\n  const planetRef = useRef();\n  useFrame(() => {\n    const ISS_TLE = `1 25544U 98067A   21166.54383293  .00001317  00000-0  32085-4 0  9997\n    2 25544  51.6442 350.8519 0003487  96.6281 300.6517 15.48988341288347`;\n    const satrec = twoline2satrec(\n      ISS_TLE.split('\\n')[0].trim(),\n      ISS_TLE.split('\\n')[1].trim());\n    const date = new Date();\n    const positionAndVelocity = propagate(satrec, date);\n    planetRef.current.position.x = positionAndVelocity.position.x*0.005;\n    planetRef.current.position.y = positionAndVelocity.position.y*0.005;\n    planetRef.current.position.z = positionAndVelocity.position.z*0.005;\n    planetRef.current.rotation.y += 0.00002;\n  }); \n  const [colorMap] = useTexture(['images/2k_earth_daymap.jpg'])\n  return (\n    <mesh ref={planetRef}>\n      <sphereGeometry args={[5, 32, 32]}/>\n      <meshStandardMaterial \n        map={colorMap}\n      />\n    </mesh>\n  );\n}\n\nfunction App () {\n  const ISS_TLE = `1 25544U 98067A   21166.54383293  .00001317  00000-0  32085-4 0  9997\n                   2 25544  51.6442 350.8519 0003487  96.6281 300.6517 15.48988341288347`;\n  \n  const satrec = twoline2satrec(\n    ISS_TLE.split('\\n')[0].trim(),\n    ISS_TLE.split('\\n')[1].trim());\n\n  const date = new Date();\n  const positionAndVelocity = propagate(satrec, date);\n\n  return (\n    <>\n      <Canvas camera={{ position: [-positionAndVelocity.position.x*0.005, -positionAndVelocity.position.y*0.005, -positionAndVelocity.position.z*0.005], fov: 20 }}>\n        <Suspense fallback=\"loading...\">\n          <Sun />\n        </Suspense>\n        <ambientLight intensity={0.4} />\n        <directionalLight position={[10, 10, 0]} intensity={1}/>\n        <Suspense fallback=\"loading...\">\n          <Planet planet={({\n            xRadius: positionAndVelocity.position.x*0.005,\n            yRadius: positionAndVelocity.position.y*0.005,\n            zRadius: positionAndVelocity.position.z*0.005\n          })}\n          />\n        </Suspense>\n        <OrbitControls />\n        <Stars\n        radius={100} // Radius of the inner sphere (default=100)\n        depth={50} // Depth of area where stars should fit (default=50)\n        count={50000} // Amount of stars (default=5000)\n        factor={6} // Size factor (default=4)\n        saturation={0} // Saturation 0-1 (default=0)\n        fade // Faded dots (default=false)\n      />\n      </Canvas>\n      <Loader />\n      <Socials />\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}